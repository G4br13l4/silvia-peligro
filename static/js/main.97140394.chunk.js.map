{"version":3,"sources":["assets/imgs/logo.jpg","components/shared/FixedNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FixedNavbar","props","toggleHamburger","toggle","state","openHamburger","setState","this","className","src","logo","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,oNC4D5BC,E,YAxDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAMVC,gBAAkB,WACd,IAAIC,EAAS,EAAKC,MAAMC,cACxB,EAAKC,SAAS,CAACD,eAAgBF,KAP/B,EAAKC,MAAQ,CACTC,eAAe,GAHJ,E,sEAYT,IACEA,EAAkBE,KAAKH,MAAvBC,cACR,OACI,yBAAKG,UAAS,mBAAcH,EAAgB,WAAa,aACrD,yBAAKG,UAAU,4BACX,yBAAKA,UAAU,kBACX,yBAAKC,IAAKC,OAEd,0BAAMF,UAAU,sBAAsBG,QAASJ,KAAKL,iBAChD,4BACA,8BAIR,yBAAKM,UAAU,gBACX,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,WAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,cAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,uBAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,cAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,oBAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,YAEJ,wBAAIA,UAAU,sBACV,uBAAGA,UAAU,sBAAb,oB,GAhDFI,IAAMC,WCSjBC,MARf,WACE,OACE,yBAAKN,UAAU,gBACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.97140394.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d88e1ac5.jpg\";","import React from 'react';\r\nimport logo from './../../assets/imgs/logo.jpg';\r\n\r\nclass FixedNavbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openHamburger: false\r\n        };\r\n    }\r\n  \r\n    toggleHamburger = () => {\r\n        let toggle = this.state.openHamburger;\r\n        this.setState({openHamburger: !toggle});\r\n    }\r\n\r\n    render() {\r\n        const { openHamburger } = this.state;\r\n        return (\r\n            <nav className={`main-nav ${openHamburger ? 'showMenu' : 'hideMenu'}`}>\r\n                <div className=\"main-nav__wrap-hamburger\">\r\n                    <div className=\"main-nav__logo\">\r\n                        <img src={logo} />\r\n                    </div>\r\n                    <span className=\"main-nav__hamburger\" onClick={this.toggleHamburger}>\r\n                        <i></i>\r\n                        <i></i>\r\n                    </span>   \r\n                </div>\r\n                \r\n                <div className=\"nav-collapse\">\r\n                    <ul className=\"nav-collapse__list\">\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Inicio</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Productos</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Clases en Línea</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Envíos</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Club de Bordado</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Eventos</a>\r\n                        </li>\r\n                        <li className=\"nav-collapse__item\">\r\n                            <a className=\"nav-collapse__link\">Contacto</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FixedNavbar;","import React from 'react';\r\nimport './App.scss';\r\nimport FixedNavbar from './components/shared/FixedNavbar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"content-wrap\"> \r\n      <FixedNavbar/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}